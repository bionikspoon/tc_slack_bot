require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventsController, type: :controller do

  before(:each) { stub_const('SLACK_TOKEN', 'secret')}
  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_params) do
    {
      token: 'secret',
      challenge: '3eZbrw1aBm2rZgRNFdxV2595E9CY3gmdALWMmHkvFXO7tYXAYM8P',
      type: 'url_verification'
    }
  end
  let(:invalid_params) {{ hello: 'world', token: 'secret' } }
  let(:unauthorized_params) do
    {
      token: 'fake_token',
      challenge: '3eZbrw1aBm2rZgRNFdxV2595E9CY3gmdALWMmHkvFXO7tYXAYM8P',
      type: 'url_verification'
    }
  end

  describe "POST #create" do
    context "with valid params" do
      before(:each) { post :create, params: valid_params }
      subject { response}

      it { is_expected.to have_http_status(:ok) }

      it "renders a JSON response" do
        expect(response.content_type).to eq('application/json')
      end

      describe "subject.body" do
        subject {JSON.parse(response.body)}
        it { is_expected.to eq( {'challenge' => '3eZbrw1aBm2rZgRNFdxV2595E9CY3gmdALWMmHkvFXO7tYXAYM8P'})}
      end

    end

    context "with invalid params" do
      before(:each) { post :create, params: invalid_params }
      subject { response }

      it { is_expected.to have_http_status(:unprocessable_entity)}

      it "renders a JSON response" do
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with unauthorized request" do
      before(:each) { post :create, params: unauthorized_params}
      subject { response }

      it { is_expected.to have_http_status(:unauthorized)}

      it "renders a JSON response" do
        expect(response.content_type).to eq('application/json')
      end
    end
  end

end
